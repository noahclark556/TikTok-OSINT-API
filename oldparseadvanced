    private async parseAdvanced(page: Page, scrollDepth: number): Promise<Array<any>> {
        const basicSelectors = new BasicSelectors();
        const postSelectors = new PostSelectors();
        let posts: Array<Post> = [];

        // await page.evaluate(() => window.scrollBy(0, 500));
        // await new Promise(resolve => setTimeout(resolve, 2000));

        // Check for "continue as guest" modal and click it.
        async function checkGuest() {
            page.setDefaultTimeout(1000);
            let guest = await page.$('.css-txolmk-DivGuestModeContainer.exd0a435 > div > div:nth-child(2)');
            if (guest) {
                await guest.click();
                return true;
            }
            return false;
        }

        async function getPostData(postSelectors: PostSelectors): Promise<Post> {
            let post: Post = {
                postNumber: posts.length + 1,
                postUrl: page.url(),
                likeCount: '',
                commentCount: '',
                repostCount: '',
                caption: '',
                comments: []
            };

            const commentHolder = await page.$(postSelectors.commentBlockSelectors.commentHolder);
            if (commentHolder) {
                const commentProfileHolder = await page.$(postSelectors.commentBlockSelectors.commentProfileHolder);

                if (commentProfileHolder) {
                    post = await commentProfileHolder.evaluate((parent, postSelectors, post) => {
                        const likeCount = parent.querySelector(`:scope > ${postSelectors.commentHeadingSelectors.likeCount}`)?.ariaLabel;
                        const commentCount = parent.querySelector(`:scope > ${postSelectors.commentHeadingSelectors.commentCount}`)?.textContent;
                        const repostCount = parent.querySelector(`:scope > ${postSelectors.commentHeadingSelectors.repostCount}`)?.textContent;
                        const caption = parent.querySelector(`:scope > ${postSelectors.commentHeadingSelectors.caption}`)?.textContent;
                        post.likeCount = likeCount ?? '';
                        post.commentCount = commentCount ?? '';
                        post.repostCount = repostCount ?? '';
                        post.caption = caption ?? ''
                        return post;
                    }, postSelectors, post);

                }

                const results = await commentHolder.evaluate((parent, postSelectors) => {
                    let comments: Array<PostComment> = [];
                    const childComments = parent.querySelectorAll(`:scope > ${postSelectors.commentDataSelectors.commentItem}`);
                    childComments.forEach(div => {
                        let parent = div.closest(postSelectors.commentDataSelectors.parentHolder);
                        let comment = div.querySelector(postSelectors.commentDataSelectors.comment)?.textContent;
                        let posterTag = (div.querySelector(postSelectors.commentDataSelectors.posterTag) as HTMLAnchorElement)?.href;
                        let posterName = div.querySelector(postSelectors.commentDataSelectors.posterName)?.textContent;
                        let likeCount = parent?.querySelector(postSelectors.commentDataSelectors.likeCount)?.ariaLabel?.toString().match(/\d+[KMB]?/)?.toString();
                        comments.push({
                            comment: comment ?? '',
                            posterTag: posterTag ?? '',
                            posterName: posterName ?? '',
                            likeCount: likeCount ?? ''
                        });
                    });

                    return comments;
                }, postSelectors);
                post.comments = results;
            }
            return post;
        }
        

        // refresh button (pops up on web page every time is opened)
        const button = await page.$(postSelectors.refreshBtn);
        if (button) {
            await button.click()
            await new Promise(resolve => setTimeout(resolve, 3000));
        }

        // Click the first post to navigate to feed
        const firstPostBtn = await page.$(postSelectors.firstPostBtn);
        if (firstPostBtn) {
            await firstPostBtn.click();
            await new Promise(resolve => setTimeout(resolve, 1000));

            // Scroll through posts, i is depth
            for (var i = 0; i <= scrollDepth; i++) {
                await checkGuest();
                await new Promise(resolve => setTimeout(resolve, 1000));
                posts.push(await getPostData(postSelectors));
                let nextBtn = await page.waitForSelector(postSelectors.nextPostBtn); //css-13if7zh-DivCommentContainer ekjxngi0
                break;
                await nextBtn?.click();
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        const divPosition = await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            element?.scrollBy(10, 500);
            const rect = element!.getBoundingClientRect();
            return {
                x: rect.left + rect.width / 2,  // X coordinate at the middle of the div
                y: rect.top + rect.height / 2   // Y coordinate at the middle of the div
            };
        }, '.css-1qjw4dg-DivContentContainer.e1mecfx00');
    
        // Move the mouse to the div's position
        await page.mouse.move(divPosition.x, divPosition.y);
    
        // Press the mouse button down to start dragging
        await page.mouse.down();
    
        // Drag the mouse down by 200 pixels
        await page.mouse.move(divPosition.x, divPosition.y + 200, { steps: 10 });
    
        // Release the mouse button to complete the drag
        await page.mouse.up();
    
        return posts;
    }